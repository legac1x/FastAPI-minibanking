services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    image: minibanking:latest
    env_file: .env
    depends_on:
      migrate:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "127.0.0.1:8000:8000"
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8000/health').read()\""]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 20s
  redis:
    image: redis:8
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    image: banking-worker:latest
    command: celery -A app.core.celery worker --loglevel=info
    env_file:
      - .env
    depends_on:
      migrate:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      db:
        condition: service_healthy

  db:
    image: postgres:17
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    image: minibanking:latest
    env_file:
      - .env
    command: alembic upgrade head
    depends_on:
      db:
        condition: service_healthy

volumes:
  postgres-data:
  redis-data: